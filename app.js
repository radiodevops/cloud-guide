// Azure Cloud Services Interactive Application

// Application data
const appData = {
  services: {
    iaas: {
      name: "IaaS (Infrastructure as a Service)",
      description: "–ê—Ä–µ–Ω–¥–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
      examples: ["Azure Virtual Machines", "Azure Storage", "Azure Virtual Network"],
      customerManages: ["–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–î–∞–Ω–Ω—ã–µ", "Runtime"],
      azureManages: ["–°–µ—Ä–≤–µ—Ä—ã", "–°–µ—Ç—å", "–•—Ä–∞–Ω–∏–ª–∏—â–∞", "–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è"],
      targetCustomers: ["–ö–æ–º–ø–∞–Ω–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏", "–ò–¢-–æ—Ç–¥–µ–ª—ã", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"],
      benefits: ["–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", "–ë—ã—Å—Ç—Ä–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"]
    },
    paas: {
      name: "PaaS (Platform as a Service)", 
      description: "–ì–æ—Ç–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
      examples: ["Azure App Service", "Azure SQL Database", "Azure Functions", "Azure Cosmos DB"],
      customerManages: ["–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–î–∞–Ω–Ω—ã–µ"],
      azureManages: ["Runtime", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–°–µ—Ä–≤–µ—Ä—ã", "–°–µ—Ç—å", "–•—Ä–∞–Ω–∏–ª–∏—â–∞", "–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è"],
      targetCustomers: ["–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", "–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "–°—Ç–∞—Ä—Ç–∞–ø—ã"],
      benefits: ["–§–æ–∫—É—Å –Ω–∞ –∫–æ–¥–µ", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]
    },
    saas: {
      name: "SaaS (Software as a Service)",
      description: "–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", 
      examples: ["Microsoft 365", "Microsoft Teams", "Dynamics 365"],
      customerManages: ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞"],
      azureManages: ["–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–î–∞–Ω–Ω—ã–µ", "Runtime", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–°–µ—Ä–≤–µ—Ä—ã", "–°–µ—Ç—å", "–•—Ä–∞–Ω–∏–ª–∏—â–∞", "–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è"],
      targetCustomers: ["–ö–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ë–∏–∑–Ω–µ—Å-–æ—Ç–¥–µ–ª—ã", "HR, –ø—Ä–æ–¥–∞–∂–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"],
      benefits: ["–ù–∏–∫–∞–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫", "–î–æ—Å—Ç—É–ø –≤–µ–∑–¥–µ", "–ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –æ–ø–ª–∞—Ç–∞"]
    }
  },
  analogies: {
    pizza: {
      onPremises: "–ì–æ—Ç–æ–≤–∏—Ç—å –ø–∏—Ü—Ü—É –¥–æ–º–∞ —Å –Ω—É–ª—è - –ø–æ–∫—É–ø–∞–µ—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
      iaas: "–í–æ–∑—å–º–∏ –∏ –∑–∞–ø–µ–∫–∏ - –≥–æ—Ç–æ–≤–æ–µ —Ç–µ—Å—Ç–æ, —Å–æ—É—Å, –Ω–∞—á–∏–Ω–∫–∞, –Ω–æ –∑–∞–ø–µ–∫–∞–µ—Ç–µ —Å–∞–º–∏", 
      paas: "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã - –ø–∏—Ü—Ü–∞ –≥–æ—Ç–æ–≤–∞, –æ—Å—Ç–∞–ª–æ—Å—å —Å—ä–µ—Å—Ç—å",
      saas: "–†–µ—Å—Ç–æ—Ä–∞–Ω - –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –±–ª—é–¥–æ"
    },
    apartment: {
      onPremises: "–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã - –≤—Å–µ –≤–∞—à–µ, –Ω–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç–æ–∂–µ –≤–∞—à–∏",
      iaas: "–ê—Ä–µ–Ω–¥–∞ –ø—É—Å—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã - –µ—Å—Ç—å —Å—Ç–µ–Ω—ã, –º–µ–±–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç–µ —Å–∞–º–∏",
      paas: "–ê—Ä–µ–Ω–¥–∞ –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã - –µ—Å—Ç—å –∫—É—Ö–Ω—è, –æ—Å—Ç–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å",
      saas: "–û—Ç–µ–ª—å —Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º - –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å"
    }
  },
  pricing: {
    benefits: ["OpEx –≤–º–µ—Å—Ç–æ CapEx", "–û–ø–ª–∞—Ç–∞ –ø–æ —Ñ–∞–∫—Ç—É", "–ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã", "–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ"],
    hiddenSavings: ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"]
  }
};

// DOM Elements
let currentTab = 'overview';

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
  initializeTabNavigation();
  initializeInteractiveElements();
  showTab('overview');
  initializeThemeSwitcher();
  initializeEnhancedFeatures();
  initializeAccessibility();
  initializeScrollProgress();
  initializeBackToTop();
  initializeScrollAnimations();
});

// Tab Navigation
function initializeTabNavigation() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', function() {
      const tabId = this.getAttribute('data-tab');
      switchTab(tabId);
    });
  });
}

function switchTab(tabId) {
  // Hide all tab contents
  const allTabContents = document.querySelectorAll('.tab-content');
  allTabContents.forEach(content => {
    content.classList.remove('active');
  });
  
  // Remove active class from all tab buttons
  const allTabButtons = document.querySelectorAll('.tab-btn');
  allTabButtons.forEach(button => {
    button.classList.remove('active');
  });
  
  // Show selected tab content
  const selectedTabContent = document.getElementById(tabId);
  if (selectedTabContent) {
    selectedTabContent.classList.add('active');
  }
  
  // Add active class to selected tab button
  const selectedTabButton = document.querySelector(`[data-tab="${tabId}"]`);
  if (selectedTabButton) {
    selectedTabButton.classList.add('active');
  }
  
  currentTab = tabId;
  
  // Scroll to top when switching tabs
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

function showTab(tabId) {
  switchTab(tabId);
}

// Interactive Elements
function initializeInteractiveElements() {
  // Add click handlers for CTA buttons
  initializeCTAButtons();
  
  // Add keyboard navigation
  initializeKeyboardNavigation();
}

function initializeCTAButtons() {
  const ctaButtons = document.querySelectorAll('.cta-buttons .btn');
  
  ctaButtons.forEach(button => {
    button.addEventListener('click', function() {
      const buttonText = this.textContent.trim();
      handleCTAClick(buttonText);
    });
  });
}

function handleCTAClick(buttonText) {
  let message = '';
  
  switch(buttonText) {
    case '–°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º Azure':
      message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç Azure —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
      break;
    case '–ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø':
      message = '–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–µ–º–æ-–æ–∫—Ä—É–∂–µ–Ω–∏–µ Azure –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.';
      break;
    case '–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é':
      message = '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.';
      break;
    default:
      message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ Azure Cloud Services!';
  }
  
  showNotification(message, 'success');
}

// Analogies functionality
function showAnalogy(type) {
  const resultDiv = document.getElementById('analogy-result');
  let content = '';
  
  if (type === 'pizza') {
    content = `
      <h4>üçï –ê–Ω–∞–ª–æ–≥–∏—è —Å –ø–∏—Ü—Ü–µ–π</h4>
      <p><strong>–ö–ª–∏–µ–Ω—Ç—É:</strong> "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–∏—Ü—Ü—É..."</p>
      <ul style="text-align: left; margin: 10px 0;">
        <li><strong>–î–æ–º–∞ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã):</strong> ${appData.analogies.pizza.onPremises}</li>
        <li><strong>IaaS:</strong> ${appData.analogies.pizza.iaas}</li>
        <li><strong>PaaS:</strong> ${appData.analogies.pizza.paas}</li>
        <li><strong>SaaS:</strong> ${appData.analogies.pizza.saas}</li>
      </ul>
      <p><em>–¢–∞–∫ –∂–µ –∏ —Å IT: —á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–∞–º –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–∞–º–∏–º!</em></p>
    `;
  } else if (type === 'apartment') {
    content = `
      <h4>üè† –ê–Ω–∞–ª–æ–≥–∏—è —Å –∂–∏–ª—å–µ–º</h4>
      <p><strong>–ö–ª–∏–µ–Ω—Ç—É:</strong> "–≠—Ç–æ –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å, –≥–¥–µ –∂–∏—Ç—å..."</p>
      <ul style="text-align: left; margin: 10px 0;">
        <li><strong>–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞:</strong> ${appData.analogies.apartment.onPremises}</li>
        <li><strong>IaaS:</strong> ${appData.analogies.apartment.iaas}</li>
        <li><strong>PaaS:</strong> ${appData.analogies.apartment.paas}</li>
        <li><strong>SaaS:</strong> ${appData.analogies.apartment.saas}</li>
      </ul>
      <p><em>–í—ã–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π!</em></p>
    `;
  }
  
  resultDiv.innerHTML = content;
  resultDiv.classList.remove('hidden');
  
  // Scroll to result
  resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

// Pricing Calculator
function calculateSavings() {
  const servers = parseInt(document.getElementById('servers').value) || 0;
  const serverCost = parseInt(document.getElementById('serverCost').value) || 0;
  
  if (servers <= 0 || serverCost <= 0) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 'error');
    return;
  }
  
  // Simplified calculation
  const totalHardwareCost = servers * serverCost;
  const maintenanceCostPerYear = totalHardwareCost * 0.15; // 15% per year
  const cloudCostPerYear = totalHardwareCost * 0.3; // Roughly 30% of hardware cost per year
  const savingsPerYear = maintenanceCostPerYear + (totalHardwareCost * 0.1); // Depreciation + maintenance
  const totalSavings3Years = savingsPerYear * 3;
  
  const resultDiv = document.getElementById('calculatorResult');
  resultDiv.innerHTML = `
    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏</h4>
    <div style="text-align: left;">
      <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> $${totalHardwareCost.toLocaleString()}</p>
      <p><strong>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –≥–æ–¥:</strong> $${maintenanceCostPerYear.toLocaleString()}</p>
      <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å Azure –≤ –≥–æ–¥:</strong> $${cloudCostPerYear.toLocaleString()}</p>
      <p style="color: #0078d7; font-weight: bold;"><strong>–≠–∫–æ–Ω–æ–º–∏—è –∑–∞ 3 –≥–æ–¥–∞:</strong> $${totalSavings3Years.toLocaleString()}</p>
    </div>
    <p style="font-size: 0.9em; color: #666; margin-top: 15px;">
      <em>* –†–∞—Å—á–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π. –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Azure.</em>
    </p>
  `;
  resultDiv.classList.remove('hidden');
  
  // Scroll to result
  resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

// Keyboard Navigation
function initializeKeyboardNavigation() {
  document.addEventListener('keydown', function(e) {
    // Tab navigation with arrow keys
    if (e.ctrlKey || e.metaKey) {
      const tabButtons = document.querySelectorAll('.tab-btn');
      const currentIndex = Array.from(tabButtons).findIndex(btn => btn.classList.contains('active'));
      
      if (e.key === 'ArrowLeft' && currentIndex > 0) {
        e.preventDefault();
        tabButtons[currentIndex - 1].click();
      } else if (e.key === 'ArrowRight' && currentIndex < tabButtons.length - 1) {
        e.preventDefault();
        tabButtons[currentIndex + 1].click();
      }
    }
    
    // Quick navigation shortcuts
    if (e.altKey) {
      switch(e.key) {
        case '1':
          e.preventDefault();
          switchTab('overview');
          break;
        case '2':
          e.preventDefault();
          switchTab('iaas');
          break;
        case '3':
          e.preventDefault();
          switchTab('paas');
          break;
        case '4':
          e.preventDefault();
          switchTab('saas');
          break;
        case '5':
          e.preventDefault();
          switchTab('analogies');
          break;
        case '6':
          e.preventDefault();
          switchTab('pricing');
          break;
      }
    }
  });
}

// Notification System
function showNotification(message, type = 'info') {
  // Update aria-live region
  const region = document.getElementById('notification-region');
  if (region) {
    region.textContent = message;
  }
  
  // Remove existing notifications
  const existingNotification = document.querySelector('.notification');
  if (existingNotification) {
    existingNotification.remove();
  }
  
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `notification notification--${type}`;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#e6f3ff' : type === 'error' ? '#ffe6e6' : '#f0f0f0'};
    color: ${type === 'success' ? '#0078d7' : type === 'error' ? '#d63384' : '#333'};
    padding: 16px 20px;
    border-radius: 8px;
    border-left: 4px solid ${type === 'success' ? '#0078d7' : type === 'error' ? '#d63384' : '#666'};
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    z-index: 1000;
    max-width: 300px;
    font-weight: 500;
    animation: slideIn 0.3s ease-out;
  `;
  
  notification.textContent = message;
  document.body.appendChild(notification);
  
  // Auto remove after 5 seconds
  setTimeout(() => {
    if (notification.parentNode) {
      notification.style.animation = 'slideOut 0.3s ease-in';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 300);
    }
  }, 5000);
  
  // Add click to dismiss
  notification.addEventListener('click', () => {
    notification.remove();
  });
}

// Add CSS animations for notifications
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
  
  .notification {
    cursor: pointer;
    transition: transform 0.2s ease;
  }
  
  .notification:hover {
    transform: scale(1.02);
  }
`;
document.head.appendChild(style);

// Enhanced Interactive Features
function initializeEnhancedFeatures() {
  // Add hover effects for service cards
  const serviceCards = document.querySelectorAll('.example-item, .customer-item, .analogy-card');
  
  serviceCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-2px)';
      this.style.transition = 'transform 0.2s ease';
    });
    
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
    });
  });
  
  // Add click effects for interactive elements
  const interactiveElements = document.querySelectorAll('.btn, .tab-btn');
  
  interactiveElements.forEach(element => {
    element.addEventListener('click', function() {
      this.style.transform = 'scale(0.95)';
      setTimeout(() => {
        this.style.transform = 'scale(1)';
      }, 150);
    });
  });
}

// Accessibility enhancements
function initializeAccessibility() {
  // Add ARIA labels and roles
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');
  tabButtons.forEach((button, index) => {
    button.setAttribute('role', 'tab');
    button.setAttribute('aria-controls', button.getAttribute('data-tab'));
    button.setAttribute('tabindex', button.classList.contains('active') ? '0' : '-1');
    button.setAttribute('aria-selected', button.classList.contains('active'));
  });
  tabContents.forEach((content, index) => {
    content.setAttribute('role', 'tabpanel');
    content.setAttribute('tabindex', '0');
    content.setAttribute('aria-labelledby', content.id);
  });
  // Ensure skip link is focusable
  const skipLink = document.querySelector('.skip-link');
  if (skipLink) {
    skipLink.setAttribute('tabindex', '0');
  }
}

// Initialize enhanced features
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(() => {
    initializeEnhancedFeatures();
    initializeAccessibility();
  }, 100);
});

// Export functions for global access
window.switchTab = switchTab;
window.showAnalogy = showAnalogy;
window.calculateSavings = calculateSavings;

// Service Worker for offline capability (optional)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    // Service worker registration would go here
    console.log('Azure Cloud Services App loaded successfully!');
  });
}

// Analytics tracking (placeholder)
function trackEvent(eventName, properties = {}) {
  console.log('Event tracked:', eventName, properties);
  // Real analytics implementation would go here
}

// Track tab switches
document.addEventListener('DOMContentLoaded', function() {
  const originalSwitchTab = window.switchTab;
  window.switchTab = function(tabId) {
    trackEvent('tab_switch', { tab: tabId, previous_tab: currentTab });
    return originalSwitchTab(tabId);
  };
});

function initializeThemeSwitcher() {
  const themeToggle = document.getElementById('theme-toggle');
  if (!themeToggle) return;
  themeToggle.addEventListener('click', () => {
    const root = document.documentElement;
    const current = root.getAttribute('data-color-scheme');
    const next = current === 'dark' ? 'light' : 'dark';
    root.setAttribute('data-color-scheme', next);
    localStorage.setItem('color-scheme', next);
    themeToggle.setAttribute('aria-label', next === 'dark' ? '–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–í–∫–ª—é—á–∏—Ç—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É');
  });
  // On load, set theme from localStorage or system
  const saved = localStorage.getItem('color-scheme');
  if (saved) {
    document.documentElement.setAttribute('data-color-scheme', saved);
  }
}

// Add focus to skip link on tab
const skipLink = document.querySelector('.skip-link');
if (skipLink) {
  skipLink.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      document.getElementById('main-content').focus();
    }
  });
}

function initializeScrollProgress() {
  const progress = document.getElementById('scrollProgress');
  if (!progress) return;
  window.addEventListener('scroll', () => {
    const scrollTop = window.scrollY;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const percent = docHeight > 0 ? scrollTop / docHeight : 0;
    progress.style.transform = `scaleX(${percent})`;
  });
}

function initializeBackToTop() {
  const btn = document.getElementById('backToTop');
  if (!btn) return;
  window.addEventListener('scroll', () => {
    if (window.scrollY > 300) {
      btn.classList.add('visible');
    } else {
      btn.classList.remove('visible');
    }
  });
  btn.addEventListener('click', () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });
}

function initializeScrollAnimations() {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });
  document.querySelectorAll('.animate-on-scroll').forEach(el => {
    observer.observe(el);
  });
}

// Utility: set button loading state
function setButtonLoading(btn, isLoading) {
  if (!btn) return;
  if (isLoading) {
    btn.classList.add('btn--loading');
    btn.setAttribute('disabled', 'disabled');
  } else {
    btn.classList.remove('btn--loading');
    btn.removeAttribute('disabled');
  }
}